set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'airblade/vim-gitgutter'
Plugin 'tpope/vim-fugitive'
Plugin 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plugin 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plugin 'vim-airline/vim-airline'
Plugin 'tomasiser/vim-code-dark'
Plugin 'morhetz/gruvbox'
Plugin 'kien/ctrlp.vim'
Plugin 'editorconfig/editorconfig-vim'
Plugin 'w0rp/ale'
Plugin 'cespare/vim-toml'
Plugin 'rust-lang/rust.vim'
Plugin 'tmux-plugins/vim-tmux-focus-events'
" Plugin 'craigemery/vim-autotag'
" Plugin 'xolox/vim-easytags'
" Plugin 'xolox/vim-misc'

call vundle#end()            " required
filetype plugin indent on    " required

let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1

syntax on
set hidden
set title
set number

" Set tabwidth
set tabstop=4
set softtabstop=0 noexpandtab
set shiftwidth=4
set noswapfile

" Wrap gitcommit file types at the appropriate length
filetype indent plugin on

set background=dark
colorscheme gruvbox
"colorscheme codedark
let g:airline_theme = 'gruvbox'
"let g:airline_theme = 'codedark'
let g:airline#extensions#tabline#enabled = 1
let g:airline_extensions = ['branch', 'tabline']
let g:airline_powerline_fonts = 1


let g:deoplete#enable_at_startup = 1

" set listchars=tab:>Â·,trail:~
" set list

set mouse=a

" Updates ctags on save
":let g:easytags_events = ['BufWritePost']
" Ctag bin location
":let g:easytags_cmd = '/usr/local/bin/ctags'
" tags file to save to
":set tags=./.git/tags;
" Look for local tags rather then global = 2
":let g:easytags_dynamic_files = 2
" Updates tags in all lower dirs might slow things down
":let g:easytags_autorecurse = 1

" auto reloads file changes on focus in tmux
set autoread
au FocusGained,BufEnter * :checktime

" set clipboard=unnamed

"list buffers nicely
nmap <C-\> :CtrlPBuffer<cr>

" NERDtree toggle
map <C-n> :NERDTreeToggle<CR>

" Add delete key for iterm2
set backspace=indent,eol,start

" ale START -------------------------------------------------
" resolve fight between vim-go and ale
"let g:go_fmt_fail_silently = 1

" this isn't an actual ale var, this is just a placeholder for stuff i use
" sometimes
let g:disabled_ale_fixers = {
\   'python': ['flake8'],
\}

let g:ale_linters = {
\   'python': ['flake8', 'pylint'],
\}
" fixers
let g:ale_fixers = {
\   'go': ['gofmt', 'goimports'],
\   'json': ['fixjson'],
\   'python': ['autopep8', 'yapf']
\}

let g:ale_list_window_size = 1

" Set this setting in vimrc if you want to fix files automatically on save.
" This is off by default.
let g:ale_fix_on_save = 1
" ale END ---------------------------------------------------

" fatih/vim-go ----------------------------------------------
" disable fmt on autosave, use linter if set to 0
let g:go_fmt_autosave = 1
" fatih/vim-go END ------------------------------------------
"
" rustlang/rust.vim -----------------------------------------
let g:rustfmt_autosave = 1
" rustlang/rust.vim END -------------------------------------

"split navigations
nnoremap <C-Down> <C-W><C-J>
nnoremap <C-Up> <C-W><C-K>
nnoremap <C-Right> <C-W><C-L>
nnoremap <C-Left> <C-W><C-H>

" Buffers
nmap = :bn<CR>
nmap - :bp<CR>

" CtrlP
let g:ctrlp_show_hidden = 1
let g:ctrlp_reuse_window  = 'startify' " fix new window split issue
let g:ctrlp_open_new_file = 'r' " open new file in current window
let g:ctrlp_working_path_mode = 0 " disable fancy working path
let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:20,results:20'
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](\.(git|hg|svn))|(tmp|node_modules|dist|vendor/bundle)$',
  \ 'file': '\v\.(exe|so|dll|jpg|jpeg|png|swp|swo)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }
let g:ctrlp_bufname_mod = ':.' " show full path relative to cwd
let g:ctrlp_bufpath_mod = '' " nothing in the path section
let g:ctrlp_switch_buffer = '' " don't switch to already displayed buffers

" set custom cmd for ignoring things in gitignore (when in project root)
"let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']

" ignore everything in gitignore (regardless of project depth)
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard', 'find %s -type f']
